// You are tasked with implementing a URL shortener service in Golang. The service should allow users to shorten long URLs into short, unique identifiers,
//  and then redirect users to the original URLs when they visit the shortened URLs.
// Requirements:Shortening URLs: Users should be able to submit a long URL to the service and receive a short identifier for it.
// Redirecting to Original URL: When users visit the shortened URL, they should be redirected to the original long URL.
// Uniqueness of Shortened URLs: Shortened URLs generated by the service should be unique.

// Long url -> short url

// key -> value

// MYsql -> Persistent Database
// Redis ->

// 7 character(0-9,A-Z,a-z) 62^7 hash value
// uuid
// distributed id generator
// http://thoughworks.shorten/tw-{unique_id}

// GET http://thoughworks.shorten/tw-{unique_id}

package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"net/http"
	"strconv"
	// "github.com/google/uuid"
)

var baseUrl = "http://thoughworks.shorten/shortenUrl"

func hashString(str string) int64 {
	return rand.Int63()
}

func shortenUrl(longUrl string) string {
	hashValue := hashString(longUrl)

	return baseUrl + strconv.FormatInt(hashValue, 10)
}

func saveShortenUrl(shortenUrl string) {

}

// func getSh

// func redirectShortenUrl(shortenUrl string) string {

// }

type requestBody struct {
	LongUrl string `json:"longUrl"`
}

func main() {

	http.HandleFunc("/shortenUrl", func(w http.ResponseWriter, r *http.Request) {
		inputRequestBody := r.Body
		rqBody := &requestBody{}
		json.NewDecoder(inputRequestBody).Decode(rqBody)

		shortenedUrl := shortenUrl(rqBody.LongUrl)
		fmt.Println("Short url ", shortenedUrl)
		w.Write([]byte(shortenedUrl))

	})

	http.ListenAndServe(":8080", nil)

}
